"""
P√°gina principal de Reportes con selector de reportes
"""

import streamlit as st
import sys
import os
import importlib
from datetime import datetime, timedelta
import calendar

# Path configuration
parent_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, parent_dir)

# Page config
st.set_page_config(
    page_title="üìä Reportes",
    page_icon="üìä",
    layout="wide"
)

# Verificar autenticaci√≥n
try:
    from modulos.auth import is_logged_in, show_login_form
    if not is_logged_in():
        st.error("‚õî Debes iniciar sesi√≥n para acceder a esta p√°gina")
        show_login_form()
        st.stop()
except ImportError:
    st.warning("‚ö†Ô∏è Sistema de autenticaci√≥n no disponible")

# Lista de reportes disponibles
REPORTES = {
    "üì¶ TodoEncargo Colombia": "todoencargo_co",
    "üáµüá™ Mega Tiendas Peruanas": "mega_tiendas_peruanas",
    "üõí MegaTienda Veendelo": "megatienda_veendelo",
    "üè¢ DTPT Group": "dtpt_group",
    "üì¶ FaborCargo": "faborcargo",
    "üåç Reporte Global": "reporte_global",
    "üí≥ Reembolsos MeLi": "reembolsos_meli"
}

MESES = {
    1: "Enero", 2: "Febrero", 3: "Marzo", 4: "Abril",
    5: "Mayo", 6: "Junio", 7: "Julio", 8: "Agosto",
    9: "Septiembre", 10: "Octubre", 11: "Noviembre", 12: "Diciembre"
}

# Selector inicial para mostrar el t√≠tulo
reporte_inicial = list(REPORTES.keys())[0]

# Crear el t√≠tulo del reporte que se actualiza din√°micamente
titulo_placeholder = st.empty()

# Todos los controles en una sola l√≠nea
col_reporte, col_periodo, col_mes, col_a√±o, col_boton = st.columns([3, 1.5, 1.5, 1.5, 2])

with col_reporte:
    reporte_seleccionado = st.selectbox(
        "Reporte:",
        options=list(REPORTES.keys()),
        help="Seleccione el reporte que desea generar"
    )

# Mostrar el t√≠tulo del reporte seleccionado
titulo_placeholder.info(f"üìä **{reporte_seleccionado}**")

with col_periodo:
    tipo_periodo = st.selectbox(
        "Per√≠odo:",
        ["Por mes", "Rango"],
        help="Tipo de per√≠odo para el reporte"
    )

if tipo_periodo == "Por mes":
    with col_mes:
        # Por defecto, seleccionar el mes anterior para que haya datos
        mes_default = datetime.now().month - 1 if datetime.now().month > 1 else 12
        mes_seleccionado = st.selectbox(
            "Mes:",
            options=range(1, 13),
            format_func=lambda x: MESES[x],
            index=mes_default - 1
        )
    with col_a√±o:
        # Si estamos en enero y seleccionamos diciembre, usar el a√±o anterior
        a√±o_default = datetime.now().year
        if datetime.now().month == 1 and mes_default == 12:
            a√±o_default = datetime.now().year - 1
        
        a√±o_seleccionado = st.selectbox(
            "A√±o:",
            options=range(2020, datetime.now().year + 1),
            index=a√±o_default - 2020
        )
    # Calcular fechas para el mes seleccionado
    fecha_inicio = datetime(a√±o_seleccionado, mes_seleccionado, 1).date()
    ultimo_dia = calendar.monthrange(a√±o_seleccionado, mes_seleccionado)[1]
    fecha_fin = datetime(a√±o_seleccionado, mes_seleccionado, ultimo_dia).date()
else:
    with col_mes:
        fecha_inicio = st.date_input(
            "Desde:",
            datetime.now().date() - timedelta(days=30)
        )
    with col_a√±o:
        fecha_fin = st.date_input(
            "Hasta:",
            datetime.now().date()
        )

with col_boton:
    st.markdown("<br>", unsafe_allow_html=True)  # Espaciado para alinear el bot√≥n
    generar_btn = st.button(
        "üîÑ Generar Reporte",
        use_container_width=True
    )

st.markdown("---")

# √Årea de reporte usando todo el ancho
if generar_btn:
    # Cargar el m√≥dulo del reporte seleccionado
    modulo_nombre = REPORTES[reporte_seleccionado]
    
    try:
        # Importar din√°micamente el m√≥dulo del reporte
        modulo_path = f"modulos.reportes.{modulo_nombre}"
        
        # Verificar si el m√≥dulo existe
        modulo_file = os.path.join(parent_dir, "modulos", "reportes", f"{modulo_nombre}.py")
        
        if os.path.exists(modulo_file):
            # Importar y ejecutar el m√≥dulo
            if modulo_path in sys.modules:
                # Recargar si ya est√° importado para reflejar cambios
                importlib.reload(sys.modules[modulo_path])
            
            modulo = importlib.import_module(modulo_path)
            
            # Ejecutar la funci√≥n principal del reporte con las fechas
            if hasattr(modulo, 'generar_reporte'):
                # Intentar pasar las fechas como par√°metros
                try:
                    modulo.generar_reporte(fecha_inicio, fecha_fin)
                except TypeError:
                    # Si la funci√≥n no acepta par√°metros, llamar sin ellos
                    with st.expander("‚ö†Ô∏è Nota", expanded=True):
                        st.warning("Este reporte generar√° sus propios controles de fecha. Las fechas seleccionadas arriba podr√≠an no aplicar.")
                    modulo.generar_reporte()
            else:
                st.warning(f"El m√≥dulo {modulo_nombre} no tiene una funci√≥n 'generar_reporte'")
        else:
            st.warning(f"""
            ‚ö†Ô∏è El m√≥dulo del reporte **{reporte_seleccionado}** a√∫n no est√° disponible.
            
            Archivo esperado: `modulos/reportes/{modulo_nombre}.py`
            """)
            
    except Exception as e:
        st.error(f"Error al cargar el reporte: {str(e)}")
        with st.expander("Detalles del error"):
            st.exception(e)
else:
    st.info("üëÜ Configure los par√°metros y haga clic en 'Generar Reporte' para comenzar")

# Footer con informaci√≥n
st.markdown("---")
st.caption("Sistema de Reportes Multipa√≠s - Todos los reportes en un solo lugar")